/* Project Euler - 012 - Highly divisible triangular number
 * Copyright (c) 2019 Tamara Roberson
 *
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
 * first ten terms would be:
 *
 *      1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 *       1: 1
 *       3: 1,3
 *       6: 1,2,3,6
 *      10: 1,2,5,10
 *      15: 1,3,5,15
 *      21: 1,3,7,21
 *      28: 1,2,4,7,14,28
 *
 *  We can see that 28 is the first triangle number to have over five divisors.
 *
 *  What is the value of the first triangle number to have over five hundred
 *  divisors?
 */

/* NOTE: The number of factors can be found by finding the prime factors and how
 * many multiples there are, adding one to each power, and multiplying the
 * result.
 *
 * n = p^a ∗ q^b ∗ r^c, where p, q, r are prime factors
 * number of factors = (a+1)(b+1)(c+1)
 */

#include <euler/euler012.hpp>
#include <euler/utils/TriangleNumberGenerator.hpp> // utils::TriangleNumberGenerator
#include <euler/utils/factors.hpp> // utils::count_factors

#include <vector> // std::vector


namespace euler
{

int find_triangle_number_over_n_divisors(int n)
{
    utils::TriangleNumberGenerator<int> tng;

    int test_num = 1;
    for (int i = 1; utils::count_factors(test_num) <= n; i++)
    {
        test_num = tng[i];
    }

    return test_num;
}

int euler012_example()
{
    return find_triangle_number_over_n_divisors(5);
}

int euler012()
{
    return find_triangle_number_over_n_divisors(500);
}

} // end namespace euler
