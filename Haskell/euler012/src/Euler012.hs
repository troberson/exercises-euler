-- Project Euler - 012 - Highly divisible triangular number
--
-- The sequence of triangle numbers is generated by adding the natural numbers.
-- So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
-- first ten terms would be:
--
--      1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
--
-- Let us list the factors of the first seven triangle numbers:
--
--       1: 1
--       3: 1,3
--       6: 1,2,3,6
--      10: 1,2,5,10
--      15: 1,3,5,15
--      21: 1,3,7,21
--      28: 1,2,4,7,14,28
--
--  We can see that 28 is the first triangle number to have over five divisors.
--
--  What is the value of the first triangle number to have over five hundred
--  divisors?

-- NB: The number of factors can be found by finding the prime factors and how
-- many multiples there are, adding one to each power, and multiplying the
-- result.
--
-- n = p^a ∗ q^b ∗ r^c, where p, q, r are prime factors
-- number of factors = (a+1)(b+1)(c+1)

module Euler012
    ( euler012
    , triangles
    , numFactors
    , triangleNumberOverNFactors
    ) where

import Data.List (group)

euler012 :: Int
euler012 = triangleNumberOverNFactors 500

triangles :: [Int]
triangles = scanl1 (+) [1..]

primes :: [Int]
primes = sieve [2..]
    where
        sieve (p:xs) = p : sieve [x | x <- xs, x `rem` p > 0]

primeFactors :: Int -> [Int]
primeFactors x = primeFactors' x primes

primeFactors' :: Int -> [Int] -> [Int]
primeFactors' x (p:ps)
    | p > x = []
    | x `rem` p == 0 = p : primeFactors' (x `div` p) (p:ps)
    | otherwise = primeFactors' x ps

numFactors :: Int -> Int
numFactors = product . map ((+1) . length) . group . primeFactors

triangleNumberOverNFactors :: Int -> Int
triangleNumberOverNFactors n = fst . head . dropWhile (\xs -> snd xs < n) $ map result triangles
    where result x = (x, numFactors x)

