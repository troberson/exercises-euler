#!/usr/bin/env python3

"""
Project Euler - 002 - Even Fibonacci Numbers

Each new term in the Fibonacci sequence is generated by adding the previous
two terms. By starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not
exceed four million, find the sum of the even-valued terms.
"""


from itertools import takewhile as _takewhile
from typing import Any as _Any
from typing import Iterable as _Iterable


__all__ = ["main", "fibonacci"]


def main() -> int:
    """Return the result for the Project Euler problem."""
    return _sum_even_fibonacci_up_to(4_000_000)


def fibonacci() -> _Iterable[int]:
    """Return a generator for Fibonacci numbers, starting with 1 and 2."""
    a: int = 1
    b: int = 2
    while True:
        yield a
        a, b = b, a + b


def _sum_even_fibonacci_up_to(n: int) -> int:
    return _sum_up_to(n, _even_fibonacci())


def _sum_up_to(n: int, i: _Iterable[int]) -> int:
    return sum(_up_to(n, i))


def _up_to(n: int, i: _Iterable[_Any]) -> _Iterable[_Any]:
    return _takewhile(lambda x: x < n, i)


def _even_fibonacci() -> _Iterable[int]:
    return filter(_is_even, fibonacci())


def _is_even(n: int) -> bool:
    return n % 2 == 0


if __name__ == "__main__":
    print(main())
